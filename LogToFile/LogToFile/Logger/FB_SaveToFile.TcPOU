<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SaveToFile" Id="{047d71fb-bde4-42a2-af2d-dbcb66ab61f9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SaveToFile 

VAR CONSTANT
	NEW_LINE : STRING(2) := '$r$n'; // Newline character
END_VAR

VAR_OUTPUT
	busy : BOOL;	// TRUE if logging is in progress
    error : BOOL;	// TRUE if an error occurs
    errId : UDINT;	 // Error ID in case of failure
END_VAR

VAR
// From FB_init
    _netId 	 : T_AmsNetId;     // Net ID for file operations
    _dirPath : T_MaxString;    // Directory path for the log file
	_logPrefix  : STRING(10);     // Prefix for log file
	_fileExtension : STRING(10);  // File extension i.e. '.txt'
	_TimeOut : TIME := DEFAULT_ADS_TIMEOUT;

// Params
	_execute : BOOL; // Trigger for the log operation
    _data 	 : T_MaxString; // Log entry to write

// Internal
	state : (IDLE, OPEN_FILE, WRITE_TO_FILE, CLOSE_FILE, RESET);

    fileOpen : FB_FileOpen;
    fileClose : FB_FileClose;
    fileWrite : FB_FileWrite;

	fileRef : UINT := 0;       	// File handle

    risingEdge : R_TRIG;     // Rising edge detector for execute signal
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{5a1e6f54-bf6a-42fc-9584-eb10e95fcd4f}" />
    <Method Name="FB_Init" Id="{30ccf310-3d82-4af2-b419-39f1876185e7}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   

   	settings : ST_LoggerSettings;
	timeOut : TIME := DEFAULT_ADS_TIMEOUT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_netID := settings.netID;
_dirPath := settings.filePath;
_logPrefix := settings.filePrefix;
_fileExtension := settings.FileType;
_timeOut := timeout;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CloseFile" Id="{74a5cdfb-1596-416f-ae36-d5091cb54b7b}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE M_CloseFile : BOOL

VAR_INPUT
	execute : BOOL;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT execute THEN
	fileOpen(bExecute := FALSE);
	M_CloseFile := FALSE;
	RETURN;
END_IF

IF NOT fileOpen.bBusy THEN     
 fileClose(sNetId := _netId, hFile := fileRef, tTimeout := _timeOut);
END_IF

// Attempt to close the file
fileClose(bExecute := TRUE);

IF NOT M_HandleError(fileClose.bError , fileClose.nErrId) THEN
	fileRef := 0; // File handle
END_IF

M_CloseFile := fileClose.bBusy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Cyclic" Id="{048234dc-7b91-4ead-bf56-35b1bb7740de}">
      <Declaration><![CDATA[METHOD M_Cyclic : BOOL

VAR
	status : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RisingEdge(CLK := _execute);

CASE state OF
    IDLE: // Idle state
        IF RisingEdge.Q THEN
            busy := TRUE;
            error := FALSE;
            errId := 0;
		
			fileOpen(bExecute := FALSE);
			fileWrite(bExecute := FALSE);
			fileClose(bExecute := FALSE);

            state := OPEN_FILE;
        END_IF

    OPEN_FILE: // Open the file
        status := M_OpenFile(TRUE);
        IF error THEN
			state := CLOSE_FILE;
        ELSIF ( fileRef <> 0 ) AND ( NOT status ) THEN
			M_OpenFile(FALSE);
			state := WRITE_TO_FILE;
        END_IF

    WRITE_TO_FILE: // Write to the file
        status := M_WriteToFile(execute := TRUE, inputString := _data);
        IF error  OR ( NOT status ) THEN
			M_WriteToFile(FALSE, '');
			state := CLOSE_FILE;
        END_IF

    CLOSE_FILE: // Close the file
       IF fileREF <> 0 THEN
			status :=  M_CloseFile(TRUE);
			IF error OR ( NOT status ) THEN
				M_CloseFile(FALSE);
				state := RESET;
        	END_IF
		ELSE
			M_CloseFile(FALSE);
			state := RESET;
	   END_IF

    RESET: // Cleanup and reset
        busy := FALSE;
        fileRef := 0;;
        state := IDLE; // Return to idle state
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_HandleError" Id="{dfd59dff-9421-41ca-b43e-9dc0525247e6}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE M_HandleError : BOOL
VAR_INPUT
	check : BOOL;
	errorID : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF check THEN
	 error := TRUE;
     errId := errorID;
ELSE
	 error := FALSE;;
END_IF

M_HandleError := check;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OpenFile" Id="{0bcc0ab2-295e-4291-b686-cbac508c09eb}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE M_OpenFile : BOOL

VAR_INPUT
	execute : BOOL;	
END_VAR

VAR
	getSystemTime : GETSYSTEMTIME; // System time function block
	fileTime : T_FILETIME;     // File time
	dateString : STRING;		// Date string for filename
	filePath : STRING; 	// Full log file path
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT execute THEN
	fileOpen(bExecute := FALSE);
	M_OpenFile := FALSE;
	RETURN;
END_IF

IF _dirPath = '' THEN
   	M_HandleError(TRUE , 99);
	M_OpenFile := FALSE;
    RETURN;
END_IF

IF NOT fileOpen.bBusy THEN
	// Generate log file path with current date
	getSystemTime(timeLoDW => fileTime.dwLowDateTime, timeHiDW => fileTime.dwHighDateTime );
	dateString := SYSTEMTIME_TO_STRING(FILETIME_TO_SYSTEMTIME(fileTime));
	filepath := CONCAT(_dirPath, _logPrefix); 			// Create file path
	filePath := CONCAT(filepath, LEFT(dateString, 10)); // Add date to file path
	filePath := CONCAT(filepath, _fileExtension); 		// Add file extension to file path.
     
	fileOpen(sNetId := '', sPathName := filePath, nMode := FOPEN_MODEAPPEND, ePath := PATH_GENERIC, tTimeout := _timeOut);
END_IF

// Attempt to open the file
fileOpen(bExecute := TRUE);

IF NOT M_HandleError(fileOpen.bError , fileOpen.nErrId) THEN
	fileRef := fileOpen.hFile; // File handle
END_IF

M_OpenFile := fileOpen.bBusy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteToFile" Id="{d69ed92a-ff23-4380-9a0c-d4999799334a}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE M_WriteToFile : BOOL

VAR_INPUT
	execute : BOOL;
	inputString : STRING; // Log entry to write
END_VAR

 VAR
	msgString : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT execute THEN
	fileOpen(bExecute := FALSE);
	M_WriteToFile := FALSE;
	RETURN;
END_IF

IF LEN(inputString) > (SIZEOF(msgString) - LEN(NEW_LINE)) THEN
	M_HandleError( TRUE, 98);
    M_WriteToFile := FALSE;
	RETURN;
END_IF

IF NOT fileWrite.bBusy THEN
	// Prepare the message with a newline
	msgString := CONCAT(NEW_LINE, inputString);

	// Write the message to the file
	fileWrite(sNetId := _netId, hFile := fileRef, pWriteBuff := ADR(msgString), cbWriteLen := LEN(msgString), tTimeout := +_timeOut);
END_IF

// Attempt to write the file
fileWrite(bExecute := TRUE);

IF NOT M_HandleError(fileWrite.bError , fileWrite.nErrId) THEN
	fileRef := fileOpen.hFile; // File handle
END_IF

M_WriteToFile := fileWrite.bBusy;]]></ST>
      </Implementation>
    </Method>
    <Property Name="pData" Id="{88dc1a2f-29b7-4659-b3bc-186c16e4409d}">
      <Declaration><![CDATA[PROPERTY pData : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{211933ae-2d8c-4b2a-a648-184a8394aa83}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pData := _data;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{37c49762-b5dd-4ff9-aeb4-9e079315eea0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_data := pData;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="pExecute" Id="{b9e5ffe8-76e2-4bc1-a28a-f6d584b5bb35}">
      <Declaration><![CDATA[PROPERTY pExecute : BOOL]]></Declaration>
      <Get Name="Get" Id="{d1934d5e-c0e2-4517-ac6f-51a021b19c80}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pExecute := _execute;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a7cc6061-7981-4284-aeda-8b94b0bfa032}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_execute := pExecute;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>