<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Logger" Id="{bd6328df-bac3-410f-b20c-6bd1fa88f7d8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Logger EXTENDS FB_CyclicFB

VAR CONSTANT
	LOG_SETTINGS : ST_LoggerSettings := (netID := '', filePath := 'C:\Logs\', filePrefix := 'SystemApp_', FileType := '.txt');	
	LOG_TIMEOUT : TIME := T#5S;
END_VAR

VAR
	bLog : BOOL := FALSE; // Trigger to log data
	
	saveToDisk : FB_SaveToFile(settings := LOG_SETTINGS, timeOut := LOG_TIMEOUT);

    ringBuffer : FB_StringRingBuffer;
    bufferMemory : ARRAY[0..5000] OF BYTE; // Adjust size as needed
    lastExportTime : TIME := T#0S;
    exportInterval : TIME := T#10S; // Export interval (1 second)
    fileLoggerBusy : BOOL := FALSE;
	
	firstCycle : BOOL := TRUE;
	exportTimer: TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="I_CyclicLogic" Id="{b3e7e2d0-1b64-4bce-a528-3de229ecd570}" />
    <Method Name="CyclicLogic" Id="{6ee5d758-bc71-4ead-be53-e49e0caf267e}" FolderPath="I_CyclicLogic\">
      <Declaration><![CDATA[METHOD CyclicLogic

VAR
	bufferFillPercentage: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF firstCycle THEN
	ringBuffer( pBuffer := ADR(bufferMemory), cbBuffer := SIZEOF(bufferMemory), bOverwrite := TRUE );
	firstCycle := FALSE;
	RETURN;
END_IF

ringBuffer();

exportTimer(IN := TRUE, PT := exportInterval);
bufferFillPercentage := (ringBuffer.cbSize * 100) / SIZEOF(bufferMemory);

IF ( ( exportTimer.Q  ) AND ( ringBuffer.nCount > 0 ) ) OR (bufferFillPercentage > 50) THEN
	M_WriteToFile(); // Export logs when conditions are met
	exportTimer(IN := FALSE); // Reset timer
END_IF;

saveToDisk.M_Cyclic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddSysLog" Id="{69157b46-8c1b-4697-b344-3c710f9c259e}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddSysLog : BOOL

VAR_INPUT
    severity : INT;
    message : STRING;
END_VAR

VAR
    logEntry : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Concatenate severity and message
logEntry := CONCAT('Severity ', INT_TO_STRING(severity));
logEntry := CONCAT(logEntry, ': ');
logEntry := CONCAT(logEntry, message);

// Add log entry to ring buffer
ringBuffer.A_AddTail(putValue := logEntry);
IF NOT ringbuffer.bOk THEN
	// Handle write error (optional)END_IF;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteToFile" Id="{53ac3c7d-69ee-4a81-bb08-5f65a43a7acb}">
      <Declaration><![CDATA[METHOD M_WriteToFile : BOOL
VAR
	test: STRING;
	test2: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ringBuffer.A_RemoveHead();
saveToDisk.pData := ringBuffer.getValue;
saveToDisk.pExecute := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Logger">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Logger.CyclicLogic">
      <LineId Id="10" Count="15" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Logger.M_AddSysLog">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Logger.M_WriteToFile">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>