<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SysLogListener" Id="{bff57947-f3e6-4330-b08e-2921e3579a23}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SysLogListener EXTENDS FB_ListenerBase2 IMPLEMENTS I_SysLogListener
VAR
    json          			: FB_JsonDomParser; 		//Parse JSON attribute of messages
    jsonAttribute 			: STRING(10000);    		//Holds JSON attribute
    hr           			: HRESULT;         		//Signals JSON attribute was successfully read
    ipListener    			: I_SysLogListener; 	//Receives callback once message is processed
	
	fbRequestEventText 		: FB_RequestEventText;
	{attribute 'TcEncoding':='UTF-8'}
	sLastMessageText 		: STRING;
	
	
	_InitComplete			: BOOL;
	
	logger 					: FB_LogToFile;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicLogic" Id="{8ebf1918-1159-48f9-b9d5-5128c1266707}">
      <Declaration><![CDATA[METHOD CyclicLogic
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( NOT _initComplete ) THEN
    _initComplete := Initialize();
    RETURN;
END_IF

Execute();

logger.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{45325fa3-d6b5-4bf1-9a78-4cf32688947a}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR
    listenerFilter 		: FB_TcEventFilter;
    hr             		: HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Listener := THIS^;                                   //For callbacks on message received
ListenerFilter.Clear().EventClass.EqualTo(TC_EVENT_CLASSES.SysLog); //Filter events by tracing class
hr := Subscribe2(ListenerFilter);                    //Subscribe to retrieve defined events
IF ( SUCCEEDED(hr) ) THEN
    Initialize := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Listener" Id="{a0d84b8e-5f67-495c-8dd5-e60c5051d264}">
      <Declaration><![CDATA[PROPERTY Listener : I_SysLogListener]]></Declaration>
      <Set Name="Set" Id="{ed731cd0-bbe6-4cee-9663-21a3494aecc1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ipListener := Listener;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="OnMessageSent" Id="{0eb5572b-760d-4192-945b-5f99556b4724}">
      <Declaration><![CDATA[METHOD OnMessageSent : Tc3_EventLogger.HRESULT
VAR_INPUT
    fbEvent 			: REFERENCE TO FB_TcEvent;
END_VAR

VAR
    message      		: ST_SysLogMessages;
    jsonDocument 		: SJsonValue;
    jsonProperty 		: SJsonValue;
	
	hasMember 			: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[hr := fbEvent.GetJsonAttribute(JsonAttribute, SIZEOF(JsonAttribute));

IF ( SUCCEEDED(hr) ) THEN
    jsonDocument := json.ParseDocument(JsonAttribute);

    IF ( json.HasMember(jsonDocument, 'Timestamp') ) THEN
        jsonProperty      := json.FindMember(JsonDocument, 'Timestamp');
        message.timestamp := json.GetString(JsonProperty);
    END_IF

    IF ( json.HasMember(jsonDocument, 'Message') ) THEN
        jsonProperty    := json.FindMember(jsonDocument, 'Message');
        message.message := json.GetString(jsonProperty);
    END_IF
	
	IF ( json.HasMember(jsonDocument, 'LogLevel') ) THEN
        jsonProperty      := json.FindMember(jsonDocument, 'LogLevel');
        message.logLevel := json.GetUint(jsonProperty);
    END_IF
	
    IF ( json.HasMember(jsonDocument, 'Source') ) THEN
        jsonProperty   := json.FindMember(jsonDocument, 'Source');
        message.Source := json.GetString(jsonProperty);
    END_IF

    IF ( json.HasMember(jsonDocument, 'Context') ) THEN
        jsonProperty    := json.FindMember(jsonDocument, 'Context');
        message.Context := json.GetString(jsonProperty);
    END_IF

    IF ( json.HasMember(jsonDocument, 'ScanCount') ) THEN
        jsonProperty      := json.FindMember(jsonDocument, 'ScanCount');
        message.ScanCount := json.GetUint(jsonProperty);
    END_IF

    IF ( json.HasMember(jsonDocument, 'Flags') ) THEN
        jsonProperty  := json.FindMember(jsonDocument, 'Flags');
        message.Flags := json.GetUint(jsonProperty);
    END_IF
	
    IF ( json.HasMember(jsonDocument, 'ExtendedInfo') ) THEN
        jsonProperty := json.FindMember(jsonDocument, 'ExtendedInfo');
        message.Json := json.GetString(jsonProperty);
    END_IF


    IF ( ipListener <> 0 ) THEN
        //Notify listener of message data
        ipListener.OnTraceReceived(Message);
    END_IF
END_IF

OnMessageSent := S_OK; // in order to receive more callbacks (Set <> S_OK in order to cancel the callbacks for this program cycle.)]]]]><![CDATA[>]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnTraceReceived" Id="{483f10e7-9961-485a-8b56-0155e3191c75}">
      <Declaration><![CDATA[METHOD OnTraceReceived
VAR_INPUT
    message 			: ST_SysLogMessages;
END_VAR

VAR
	timestamp 			: T_MaxString;
	msg   				: T_MaxString;
	logLevel  			: E_SysLogLevel;
	source    			: T_MaxString;
	context   			: T_MaxString;
	scanCount 			: UDINT;
	flags     			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Extract relevant fields
timestamp := message.Timestamp;
msg   	  := message.Message;
logLevel  := message.LogLevel;
source    := message.Source;
context   := message.Context;
scanCount := message.ScanCount;
flags     := message.Flags;


logger.M_AddSysLog(1,msg);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>