<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SysLogMsgListener" Id="{0360203c-1ba6-41bf-8e19-b9bc785da99e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK  FB_SysLogMsgListener  EXTENDS FB_ListenerBase2
VAR
    Json          : FB_JsonDomParser; 		//Parse JSON attribute of messages
     JsonAttribute : STRING(10000);    		//Holds JSON attribute
     hr            : HRESULT;         		//Signals JSON attribute was successfully read
    ipListener    : I_SysLogListener; 	//Receives callback once message is processed
	
	fbRequestEventText : FB_RequestEventText;
	{attribute 'TcEncoding':='UTF-8'}
	sLastMessageText : STRING;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Listener" Id="{e04ea468-0d95-4888-ba76-4a9c305f0ea9}">
      <Declaration><![CDATA[PROPERTY Listener : I_SysLogListener]]></Declaration>
      <Set Name="Set" Id="{950bc0e2-707f-40c3-b5ae-1275deac7127}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ipListener := Listener;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="OnMessageSent" Id="{46fa173d-841d-44a4-9b56-28528074126a}">
      <Declaration><![CDATA[METHOD OnMessageSent : Tc3_EventLogger.HRESULT
VAR_INPUT
    fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR
    Message      : ST_SysLogMessages;
    JsonDocument : SJsonValue;
    JsonProperty : SJsonValue;
	
	bHasMember : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[hr := fbEvent.GetJsonAttribute(JsonAttribute, SIZEOF(JsonAttribute));

IF SUCCEEDED(hr) THEN
    JsonDocument := Json.ParseDocument(JsonAttribute);

    IF Json.HasMember(JsonDocument, 'Timestamp') THEN
        JsonProperty      := Json.FindMember(JsonDocument, 'Timestamp');
        Message.Timestamp := Json.GetString(JsonProperty);
    END_IF

    IF Json.HasMember(JsonDocument, 'Message') THEN
        JsonProperty    := Json.FindMember(JsonDocument, 'Message');
        Message.Message := Json.GetString(JsonProperty);
    END_IF
	
	IF Json.HasMember(JsonDocument, 'LogLevel') THEN
        JsonProperty      := Json.FindMember(JsonDocument, 'LogLevel');
        Message.LogLevel := Json.GetUint(JsonProperty);
    END_IF
	
    IF Json.HasMember(JsonDocument, 'Source') THEN
        JsonProperty   := Json.FindMember(JsonDocument, 'Source');
        Message.Source := Json.GetString(JsonProperty);
    END_IF

    IF Json.HasMember(JsonDocument, 'Context') THEN
        JsonProperty    := Json.FindMember(JsonDocument, 'Context');
        Message.Context := Json.GetString(JsonProperty);
    END_IF

    IF Json.HasMember(JsonDocument, 'ScanCount') THEN
        JsonProperty      := Json.FindMember(JsonDocument, 'ScanCount');
        Message.ScanCount := Json.GetUint(JsonProperty);
    END_IF

    IF Json.HasMember(JsonDocument, 'Flags') THEN
        JsonProperty  := Json.FindMember(JsonDocument, 'Flags');
        Message.Flags := Json.GetUint(JsonProperty);
    END_IF
	
    IF Json.HasMember(JsonDocument, 'ExtendedInfo') THEN
        JsonProperty := Json.FindMember(JsonDocument, 'ExtendedInfo');
        Message.Json := Json.GetString(JsonProperty);
    END_IF


    IF ipListener <> 0 THEN
        //Notify listener of message data
        ipListener.OnTraceReceived(Message);
    END_IF
END_IF

OnMessageSent := S_OK; // in order to receive more callbacks (Set <> S_OK in order to cancel the callbacks for this program cycle.)]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>