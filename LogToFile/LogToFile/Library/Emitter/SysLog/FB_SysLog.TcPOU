<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SysLog" Id="{d220da4d-4c63-430e-9504-bb591ec9ab64}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SysLog
VAR
	event						 	: FB_TcMessage;
	jsonParser					 	: FB_JsonDomParser;
	exParser 				 		: FB_JsonDomParser;
	timeFormatter				 	: FB_FormatString;
	messagesSentThisScan		 	: UDINT;
	previousAddEntrySource		 	: T_MaxString;
	previousAddEntryMessage	 		: T_MaxString;
	previousAddEntryFlags		 	: UDINT;
	previousAddEntryJsonSource	 	: T_MaxString;
	previousAddEntryJsonMessage 	: T_MaxString;
	previousAddEntryJsonFlags	 	: UDINT;
	previousAddEntryJson		 	: T_MaxString;
	initComplete				 	: BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{69643a7d-e4e5-42a3-9a2d-195dbc685e06}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR

VAR
	hr : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	IF SUCCEEDED(Event.CreateEx(TC_EVENTS.Tracing.TraceEvent, 0)) THEN
{analysis -15}
IF ( NOT Event.EqualsToEventEntryEx(TC_EVENTS.Tracing.TraceEvent) ) THEN
	IF ( SUCCEEDED(Event.CreateEx(TC_EVENTS.SysLog.Logger, 0)) ) THEN
		InitComplete := TRUE;
	END_IF
ELSE
	InitComplete := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddContext" Id="{2cc3dc64-e45f-4229-aaf9-efb1017803dc}">
      <Declaration><![CDATA[METHOD PRIVATE M_AddContext

VAR_INPUT
	json 			: SJsonValue;
	message 		: REFERENCE TO T_MaxString;
	logLevel 		: E_SysLogLevel;
	source 			: STRING;
	flags  			: UDINT;
END_VAR

VAR
	// Time 
	CurrentDCTime : DCTIMESTRUCT;
	Task : T_MaxString;
	CycleCount : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Collect Properties
currentDCTime := DCTIME64_TO_DCTIMESTRUCT(F_GetActualDcTime64());
TimeFormatter(
    sFormat := '%2.2d:%2.2d:%2.2d.%3.3d%3.3d',
    arg1    := F_WORD(currentDCTime.wHour),
    arg2    := F_WORD(currentDCTime.wMinute),
    arg3    := F_WORD(currentDCTime.wSecond),
    arg4    := F_WORD(currentDCTime.wMilliseconds),
    arg5    := F_WORD(currentDCTime.wMicroseconds),	
    bError  => ,    // If there's a formatting error, this is TRUE
    nErrId  =>      // Error ID if bError=TRUE
);		
task := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].TaskName;
cycleCount := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount;

event.ipArguments.Clear().AddString(Message);

// Pass properties to Json extnsion for logging.
jsonParser.AddStringMember(json, 'Timestamp', timeFormatter.sOut);
jsonParser.AddStringMember(json, 'Message', message);
jsonParser.AddUIntMember(json, 'LogLevel', logLevel);
jsonParser.AddStringMember(json, 'Source', source);
jsonParser.AddStringMember(json, 'Context', task);
jsonParser.AddUint64Member(json, 'ScanCount', cycleCount);
jsonParser.AddUint64Member(json, 'Flags', flags);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddEntry" Id="{3a21502d-ccdb-4fe9-ba91-818c33927cdc}">
      <Declaration><![CDATA[METHOD M_AddEntry : BOOL
VAR_INPUT
	source				: T_MaxString;
	message 			: T_MaxString;
	logLevel 			: E_SysLogLevel;
	flags				: UDINT;
END_VAR

VAR
	document	  		: SJsonValue;
	jsonAttribute 		: T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( NOT InitComplete )THEN
	RETURN;
END_IF

{analysis -62}
IF ( NOT pTracingAllowed ) THEN
	{analysis -90}
	RETURN;
END_IF

IF ( NOT Parameters_Tracing.ALLOW_DUPLICATE_SEQUENTIAL_MESSAGES ) THEN
	IF (Source = previousAddEntrySource) AND (Message = previousAddEntryMessage) AND (Flags = previousAddEntryFlags) THEN
		//This message is identical to the last message sent--ignore
		RETURN;
	END_IF
END_IF

// Create JSON, add Context and add to Event
document := jsonParser.NewDocument();
M_AddContext(JSON := document, message := message, logLevel := logLevel, source := source, flags := flags);
jsonAttribute := jsonParser.GetJson(document);
event.SetJsonAttribute(jsonAttribute);

// Send Event
Event.Send(0);


// Tidy up
MessagesSentThisScan := MessagesSentThisScan + 1;
MEMSET(ADR(previousAddEntrySource), 0, SIZEOF(T_MaxString));
MEMSET(ADR(previousAddEntryMessage), 0, SIZEOF(T_MaxString));
previousAddEntrySource	 := Source;
previousAddEntryMessage := Message;
previousAddEntryFlags	 := Flags;]]></ST>
      </Implementation>
    </Method>
    <Property Name="pTracingAllowed" Id="{fbceb28c-262e-4c93-85b5-1faca173531f}">
      <Declaration><![CDATA[PROPERTY pTracingAllowed : BOOL]]></Declaration>
      <Get Name="Get" Id="{2e46f83a-28ff-4b7f-b4aa-7e5c2061b3a2}">
        <Declaration><![CDATA[VAR_INST
	LastScanCount  : UDINT;
	MissedMessages : UDINT;
	Throttled	   : BOOL;
END_VAR

VAR
	ThrottledNotificationString : T_MaxString;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[{analysis -62}
IF NOT Parameters_Tracing.TRACING_ENABLED THEN
	pTracingAllowed := FALSE;
	RETURN;
END_IF

IF TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount = LastScanCount THEN
	//Trying to send multiple messages in same scan
	IF Throttled THEN
		MissedMessages := MissedMessages + 1;
		RETURN;
	ELSIF MessagesSentThisScan >= Parameters_Tracing.MAX_LOG_ENTRIES_PER_SCAN AND NOT Throttled THEN
		//Need to throttle messsage queue
		Event.ipArguments.Clear().AddString('Too many messages sent in single scan; tracing throttled.');
		Event.Send(0);
		MissedMessages := MissedMessages + 1;
		Throttled	   := TRUE;
		pTracingAllowed := FALSE;
		RETURN;
	ELSE
		pTracingAllowed := TRUE;
	END_IF
ELSE
	IF Throttled THEN
		ThrottledNotificationString := CONCAT('Missed ', CONCAT(TO_STRING(MissedMessages), ' throttled messages previously.'));
		Event.ipArguments.Clear().AddString(ThrottledNotificationString);
		Event.Send(0);
		MissedMessages := 0;
	END_IF

	LastScanCount		 := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount;
	MessagesSentThisScan := 0;
	Throttled			 := FALSE;
	pTracingAllowed		 := TRUE;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_SysLog">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SysLog.FB_Init">
      <LineId Id="3" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SysLog.M_AddContext">
      <LineId Id="3" Count="24" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SysLog.M_AddEntry">
      <LineId Id="3" Count="32" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SysLog.pTracingAllowed.Get">
      <LineId Id="3" Count="33" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>