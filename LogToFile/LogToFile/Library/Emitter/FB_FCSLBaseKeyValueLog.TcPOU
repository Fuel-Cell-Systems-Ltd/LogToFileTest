<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_FCSLBaseKeyValueLog" Id="{f06bb193-1b89-4bfd-9179-e82b7939bd3e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FCSLBaseKeyValueLog
VAR
	Event						 : FB_TcMessage;
	JsonParser					 : FB_JsonDomParser;
	TimeFormatter				 : FB_FormatString;
	MessagesSentThisScan		 : UDINT;
	Previous_k	 				 : T_MaxString;
	Previous_v					 : T_MaxString;
	InitComplete				 : BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AddContext" Id="{758d1ad5-f5cb-4748-b8f3-46cb976c127a}">
      <Declaration><![CDATA[METHOD PRIVATE M_AddContext

VAR_INPUT
	json 			: SJsonValue;
	k 				: REFERENCE TO T_MaxString;
	v 				: REFERENCE TO T_MaxString;
END_VAR

VAR
	// Time 
	currentDCTime 			: DCTIMESTRUCT;
	msg						: STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Collect Properties
currentDCTime := DCTIME64_TO_DCTIMESTRUCT(F_GetActualDcTime64());
TimeFormatter(
    sFormat := '%2.2d:%2.2d:%2.2d.%3.3d%3.3d',
    arg1    := F_WORD(currentDCTime.wHour),
    arg2    := F_WORD(currentDCTime.wMinute),
    arg3    := F_WORD(currentDCTime.wSecond),
    arg4    := F_WORD(currentDCTime.wMilliseconds),
    arg5    := F_WORD(currentDCTime.wMicroseconds),	
    bError  => ,    // If there's a formatting error, this is TRUE
    nErrId  =>      // Error ID if bError=TRUE
);		
msg := CONCAT(k,v);
Event.ipArguments.Clear().AddString(msg);

// Pass properties to Json extnsion for logging.
jsonParser.AddStringMember(json, 'Timestamp', timeFormatter.sOut);
jsonParser.AddStringMember(json, 'k', k);
jsonParser.AddStringMember(json, 'v', v);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddEntry" Id="{e3c3d63d-8d17-4e00-a533-9f4171cf2609}">
      <Declaration><![CDATA[METHOD M_AddEntry : BOOL
VAR_INPUT
	k 					: T_MaxString;
	v 					: T_MaxString;
END_VAR

VAR
	document	  		: SJsonValue;
	jsonAttribute 		: T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( NOT InitComplete ) THEN
	RETURN;
END_IF

{analysis -62}
IF ( NOT pTracingAllowed ) THEN
	{analysis -90}
	RETURN;
END_IF

IF ( NOT Parameters_Tracing.ALLOW_DUPLICATE_SEQUENTIAL_MESSAGES ) THEN
	IF ( (k = Previous_k) AND (v = Previous_v) ) THEN
		//This message is identical to the last message sent--ignore
		RETURN;
	END_IF
END_IF

// Create JSON, add Context and add to Event
document := JsonParser.NewDocument();
M_AddContext(JSON := Document, k := k, v := v);
jsonAttribute := JsonParser.GetJson(document);
event.SetJsonAttribute(jsonAttribute);

// Send Event
Event.Send(0);

// Tidy up
MessagesSentThisScan := MessagesSentThisScan + 1;
MEMSET(ADR(Previous_k), 0, SIZEOF(T_MaxString));
MEMSET(ADR(Previous_v), 0, SIZEOF(T_MaxString));
Previous_k	 := k;
Previous_v := v;]]></ST>
      </Implementation>
    </Method>
    <Property Name="pTracingAllowed" Id="{6b860336-0145-4884-bd4a-dae9b61c117c}">
      <Declaration><![CDATA[PROPERTY pTracingAllowed : BOOL]]></Declaration>
      <Get Name="Get" Id="{9dfc4f46-6071-4c88-85a0-a631dd8a27f4}">
        <Declaration><![CDATA[VAR_INST
	LastScanCount  : UDINT;
	MissedMessages : UDINT;
	Throttled	   : BOOL;
END_VAR

VAR
	ThrottledNotificationString : T_MaxString;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[{analysis -62}
IF ( NOT Parameters_Tracing.TRACING_ENABLED ) THEN
	pTracingAllowed := FALSE;
	RETURN;
END_IF

IF ( TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount = LastScanCount )THEN
	//Trying to send multiple messages in same scan
	IF ( Throttled ) THEN
		MissedMessages := MissedMessages + 1;
		RETURN;
	ELSIF ( ( MessagesSentThisScan >= Parameters_Tracing.MAX_LOG_ENTRIES_PER_SCAN ) AND ( NOT Throttled ) ) THEN
		//Need to throttle messsage queue
		Event.ipArguments.Clear().AddString('Too many messages sent in single scan; tracing throttled.');
		Event.Send(0);
		MissedMessages := MissedMessages + 1;
		Throttled	   := TRUE;
		pTracingAllowed := FALSE;
		RETURN;
	ELSE
		pTracingAllowed := TRUE;
	END_IF
ELSE
	IF ( Throttled ) THEN
		ThrottledNotificationString := CONCAT('Missed ', CONCAT(TO_STRING(MissedMessages), ' throttled messages previously.'));
		Event.ipArguments.Clear().AddString(ThrottledNotificationString);
		Event.Send(0);
		MissedMessages := 0;
	END_IF

	LastScanCount		 := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount;
	MessagesSentThisScan := 0;
	Throttled			 := FALSE;
	pTracingAllowed		 := TRUE;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>