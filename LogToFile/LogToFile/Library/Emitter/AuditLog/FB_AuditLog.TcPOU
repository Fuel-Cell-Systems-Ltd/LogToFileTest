<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_AuditLog" Id="{9f088aee-3833-491d-b09c-e2687a7d2630}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AuditLog
VAR
	Event						 : FB_TcMessage;
	JsonParser					 : FB_JsonDomParser;
	TimeFormatter				 : FB_FormatString;
	MessagesSentThisScan		 : UDINT;
	Previous_k	 				 : T_MaxString;
	Previous_v					 : T_MaxString;
	InitComplete				 : BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{7a89f529-4923-4ae2-917a-ed5d3a9b919e}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR

VAR
	hr : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	IF SUCCEEDED(Event.CreateEx(TC_EVENTS.Tracing.TraceEvent, 0)) THEN
{analysis -15}
IF NOT Event.EqualsToEventEntryEx(TC_EVENTS.Tracing.TraceEvent) THEN
	IF SUCCEEDED(Event.CreateEx(TC_EVENTS.AuditLog.Logger, 0)) THEN
		InitComplete := TRUE;
	END_IF
ELSE
	InitComplete := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddContext" Id="{664b27c4-60b4-47a0-9fcc-9f0b74dbbeaa}">
      <Declaration><![CDATA[METHOD PRIVATE M_AddContext

VAR_INPUT
	Json : SJsonValue;
	k : REFERENCE TO T_MaxString;
	v : REFERENCE TO T_MaxString;
END_VAR

VAR
	// Time 
	CurrentDCTime : DCTIMESTRUCT;
	Task : T_MaxString;
	CycleCount : UDINT;
	msg: STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Collect Properties
CurrentDCTime := DCTIME64_TO_DCTIMESTRUCT(F_GetActualDcTime64());
TimeFormatter(
    sFormat := '%2.2d:%2.2d:%2.2d.%3.3d%3.3d',
    arg1    := F_WORD(CurrentDCTime.wHour),
    arg2    := F_WORD(CurrentDCTime.wMinute),
    arg3    := F_WORD(CurrentDCTime.wSecond),
    arg4    := F_WORD(CurrentDCTime.wMilliseconds),
    arg5    := F_WORD(CurrentDCTime.wMicroseconds),	
    bError  => ,    // If there's a formatting error, this is TRUE
    nErrId  =>      // Error ID if bError=TRUE
);		
msg := CONCAT(k,v);
Event.ipArguments.Clear().AddString(msg);

// Pass properties to Json extnsion for logging.
JsonParser.AddStringMember(Json, 'Timestamp', TimeFormatter.sOut);
JsonParser.AddStringMember(Json, 'k', k);
JsonParser.AddStringMember(Json, 'v', v);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddEntry" Id="{6ccfe731-776e-42d3-b521-560e7cca4c70}">
      <Declaration><![CDATA[METHOD M_AddEntry : BOOL
VAR_INPUT
	k : T_MaxString;
	v : T_MaxString;
END_VAR

VAR
	Document	  : SJsonValue;
	JsonAttribute : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT InitComplete THEN
	RETURN;
END_IF

{analysis -62}
IF NOT pTracingAllowed THEN
	{analysis -90}
	RETURN;
END_IF

IF NOT Parameters_Tracing.ALLOW_DUPLICATE_SEQUENTIAL_MESSAGES THEN
	IF  (k = Previous_k) AND (v = Previous_v) THEN
		//This message is identical to the last message sent--ignore
		RETURN;
	END_IF
END_IF

// Create JSON, add Context and add to Event
Document := JsonParser.NewDocument();
M_AddContext(JSON := Document, k := k, v := v);
JsonAttribute := JsonParser.GetJson(Document);
Event.SetJsonAttribute(JsonAttribute);

// Send Event
Event.Send(0);

// Tidy up
MessagesSentThisScan := MessagesSentThisScan + 1;
MEMSET(ADR(Previous_k), 0, SIZEOF(T_MaxString));
MEMSET(ADR(Previous_v), 0, SIZEOF(T_MaxString));
Previous_k	 := k;
Previous_v := v;]]></ST>
      </Implementation>
    </Method>
    <Property Name="pTracingAllowed" Id="{b8050e1e-9d62-4288-a7ee-f696f5b0585d}">
      <Declaration><![CDATA[PROPERTY pTracingAllowed : BOOL]]></Declaration>
      <Get Name="Get" Id="{9d392c52-98fa-4ba7-84a1-7da360ec224c}">
        <Declaration><![CDATA[VAR_INST
	LastScanCount  : UDINT;
	MissedMessages : UDINT;
	Throttled	   : BOOL;
END_VAR

VAR
	ThrottledNotificationString : T_MaxString;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[{analysis -62}
IF NOT Parameters_Tracing.TRACING_ENABLED THEN
	pTracingAllowed := FALSE;
	RETURN;
END_IF

IF TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount = LastScanCount THEN
	//Trying to send multiple messages in same scan
	IF Throttled THEN
		MissedMessages := MissedMessages + 1;
		RETURN;
	ELSIF MessagesSentThisScan >= Parameters_Tracing.MAX_LOG_ENTRIES_PER_SCAN AND NOT Throttled THEN
		//Need to throttle messsage queue
		Event.ipArguments.Clear().AddString('Too many messages sent in single scan; tracing throttled.');
		Event.Send(0);
		MissedMessages := MissedMessages + 1;
		Throttled	   := TRUE;
		pTracingAllowed := FALSE;
		RETURN;
	ELSE
		pTracingAllowed := TRUE;
	END_IF
ELSE
	IF Throttled THEN
		ThrottledNotificationString := CONCAT('Missed ', CONCAT(TO_STRING(MissedMessages), ' throttled messages previously.'));
		Event.ipArguments.Clear().AddString(ThrottledNotificationString);
		Event.Send(0);
		MissedMessages := 0;
	END_IF

	LastScanCount		 := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount;
	MessagesSentThisScan := 0;
	Throttled			 := FALSE;
	pTracingAllowed		 := TRUE;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>